---
title: "Capstone Project"
author: "Alex, Rachel, Vlatko, Malte"
date: "2024-06-06"
format: html
execute: 
  cache: true
  echo: false
  error: true
jupyter: python3
editor:
  render-on-save: true
---

# load libraries and data

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
d = pd.read_csv("data/daily_sales_report.csv")

```


# EDA 

```{python}
d.head()
```

```{python}
d["type_name"].value_counts()
```


```{python}

```


```{python}
Changes Vlatko
```

```{python}

```


# data cleaning

```{python}
d['date'] =pd.to_datetime(d['date'])
d['weekday'] =d['date'].dt.dayofweek
d.weekday.value_counts()
```

# Feature engeneering - Categorizing
```{python}
donut_counts = d.loc[d["type_name"] == "donuts", "item_name"].value_counts()
donut_counts.head(30)
```
```{python}
different_products = ['Star Wars Day', 'Pizza Hawaii', 'Grilled Cheese', 'Pie Day', 'Bat', 'Cat Day', 'NYE: Tonka Cream', 'Zimtstern Donut', 'Free Donut Softeis ', 'Cookie Softie Sandwich', 'Choc Custard Filled', 'Free Donut Upgrade', 'Strawberry Bun', 'Fried Chicken & Donut Waffle', 'Waffle + Maple Syrup', 'Chicken Waffle Sriracha', 'Chicken Waffle Truffle', 'Waffle + Sriracha ', 'Chicken Waffle Maple', 'Grilled Cheese with JalapeÃ±os', 'Waffle + Truffle3', 'Grilled Cheese + Jalapenos', 'Classic Hot Dog', 'Special Hot Dog', 'Waffle + Truffle', 'Free Berliner']
```
```{python}
# Define the categories
classics = [
    'Strawberry Sprinkles', 'White Choc & Strawberries', 'Choc Sprinkles', 
    'Cinnamon Sugar', 'Boston Cream'
]
specials = [
    'Blueberry Lemon Cheesecake', 'Chocolate Bomboloni', 'Apple Pie', 
    'Bienenstich'
]
monthly_specials = [
    'Passionfruit', 'Strawberry Shortcake', 'Strawberries & Cream', 
    'Lemon Tart', 'Pistachio Dream'
]
different_products = ['Different Product']

# Function to determine the category
def categorize_item(item_name):
    if item_name in classics:
        return 'classics'
    elif item_name in specials:
        return 'specials'
    elif item_name in monthly_specials:
        return 'monthly_specials'
    elif item_name in different_products:
        return 'not_donut'
    elif item_name == 'donuts sold (old)':  # Corrected syntax
        return 'old'
    else:
        return 'other'

# Apply the function to create the 'item_category' column
d['item_category'] = d['item_name'].apply(categorize_item)

# Display the DataFrame
d.tail(10)
```
```{python}
# Filter the DataFrame for rows where type_name is 'donut group'
donut_group_items = d[d['type_name'] == 'donut group']

# Get the unique values in the item_name column for the filtered rows
unique_donut_group_items = donut_group_items['item_name'].value_counts()

# Display the unique item names
print(unique_donut_group_items)
```
```{python}

# Plotting
plt.figure(figsize=(12, 6))
sns.barplot(data=d, x='weekday', y='amount', hue='item_category', ci=None)

plt.title('Total Amount per Weekday per Item Category')
plt.xlabel('Weekday')
plt.ylabel('Amount')
plt.legend(title='Item Category')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()
```
```{python}
# Convert the 'date' column to datetime format
df['date'] = pd.to_datetime(df['date'])

# Extract year from the date
df['year'] = df['date'].dt.year

# Filter the data for years 2017 to 2024
df_filtered = df[(df['year'] >= 2017) & (df['year'] <= 2024)]

# Group by 'year', 'weekday', and 'item_category', and sum the 'amount'
grouped_df = df_filtered.groupby(['year', 'weekday', 'item_category'])['amount'].sum().reset_index()

# Plotting the bar chart
plt.figure(figsize=(14, 8))
sns.barplot(data=grouped_df, x='weekday', y='amount', hue='item_category')
plt.title('Total Amount per Weekday per Item Category (2017-2024)')
plt.xlabel('Weekday')
plt.ylabel('Total Amount')
plt.legend(title='Item Category', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.show()
```