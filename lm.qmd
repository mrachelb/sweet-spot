---
title: "Linear Regression"
author: "Alex, Rachel, Vlatko, Malte"
date: "2024-06-20"
format: html
execute: 
  cache: true
  echo: false
  error: true
jupyter: python3
editor:
  render-on-save: true
---

```{python}

# load modules and data

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer, KNNImputer 
from sklearn.preprocessing import OneHotEncoder, RobustScaler, FunctionTransformer, PolynomialFeatures
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.model_selection import cross_validate
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_percentage_error
d =pd.read_csv("train_df.csv")

# create function for adjusted r-squared

def adj_r2(r2, x):
    adjr2 =round(1 - ((1 -r2) * (len(x) - 1) / (len(x) - x.shape[1] - 1)),3)
    return adjr2 

# reduce dataset to daily totals and drop nas

train =d[(d["item_category"] =="daily total")]
train =train.dropna()

# create features and target variable
numfeat1 =["lag1"]
numfeat2 =["days_back"]
numfeat3 =["temperature_2m_mean","sunshine_duration","precipitation_hours"]
catfeat =["store_name","month","weekday","hol_pub","hol_school",
"valentines_day","nye","halloween",
"street_market","public_space"]
xtrain =train[numfeat1 +numfeat2 +numfeat3 +catfeat]
ytrain =train['total_amount']


# feature engineering
num_tr1 =Pipeline(
  steps=[
    ("scaling", RobustScaler())
])

num_tr2 =Pipeline(
  steps=[
    ("scaling", RobustScaler()),
    ("polyint",PolynomialFeatures(3,include_bias=False))
])

num_tr3 =Pipeline(
  steps=[
    ("scaling", RobustScaler()),
    ("polyint",PolynomialFeatures(3,include_bias=False))
])


cat_tr =Pipeline(steps=[
  ("ohe", OneHotEncoder(drop='first',sparse_output=False))
])

prepro =ColumnTransformer(
  transformers=[
    ("num1", num_tr1, numfeat1),
    ("num2", num_tr2, numfeat2),
    ("num3", num_tr3, numfeat3),
    ("cat",cat_tr,catfeat)
])

prepro.set_output(transform="pandas")
xtraintrans =prepro.fit_transform(xtrain)

# model estimation

models =[
  ("ols",LinearRegression())
]

for name,algorithm in models:
  model =Pipeline(steps=[
    ("prepro", prepro),
    (name,algorithm)])
  model.fit(xtrain,ytrain)
  ytrainpred =model.predict(xtrain)
  r2_lin_train =r2_score(ytrain, ytrainpred)
  print("Adjusted r-squared: ", adj_r2(r2_lin_train,xtraintrans))
  print("Mean absolute percentage error: ", 100*mean_absolute_percentage_error(ytrain, ytrainpred).round(2))

ytrain =ytrain.reset_index(drop=True)
diff =ytrain -ytrainpred
ytrainpred =pd.DataFrame(ytrainpred)
diff =pd.DataFrame(diff)
fit =pd.concat([ytrain, ytrainpred, diff], axis =1)
```