---
title: "Capstone Project"
author: "Alex, Rachel, Vlatko, Malte"
date: "2024-06-06"
format: html
execute: 
  cache: true
  echo: false
  error: true
jupyter: python3
editor:
  render-on-save: true
---

# load libraries and data

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

from sklearn.model_selection import train_test_split, GroupShuffleSplit
```


```{python}
%run functions.py
```


```{python}
d = pd.read_csv("data/daily_sales_report.csv")
school_h_be = pd.read_csv("data/hol_school_b.csv")
school_h_hh = pd.read_csv("data/hol_school_h.csv")
```


# EDA 

```{python}
d
```



## Converting "date" to datetime 

```{python}
d['date'] = pd.to_datetime(d['date'])
```



# Feature engeneering 

## Categorizing

```{python}

# Apply the function to create the 'item_category' column

d['item_category'] = d['item_name'].apply(categorize_item)
```


```{python}
d["item_category"].value_counts(normalize=True)
```


## Calculating total amount

```{python}
d['total_amount'] = d.apply(calculate_total_amount, axis=1)
```

```{python}
d
```


## Adding weather variables

```{python}
d = weather_data(d)
```

```{python}
d
```



## Balancing Item Categories


```{python}

updated_d = update_item_category(d)

```

```{python}
updated_d
```

```{python}
updated_d[updated_d["item_category"] == "other"]["item_name"].value_counts()
```


```{python}
updated_d["item_category"].value_counts()
```


```{python}
updated_d = updated_d[~updated_d["item_category"].isin(["other","not_donut"])]
```


```{python}
updated_d["item_category"].value_counts()
```


## Drop year and month features to avoid duplicates below

```{python}
updated_d = updated_d.drop(["year","month"], axis = 1)
```


## Adding holidays

```{python}
updated_d = hol_pub(updated_d)
```

```{python}
updated_d = hol_school(updated_d, school_h_be, school_h_hh)
```


## Adding date info

```{python}
updated_d = date_info(updated_d)
```


## Dropping duplicates

```{python}
updated_d = drop_duplicates(updated_d)
```


```{python}
updated_d
```


## Test-train split

```{python}
train_idx, test_idx = next(GroupShuffleSplit(n_splits = 1, random_state=102, test_size = 0.25).split(updated_d, groups = updated_d["date"]))

train = updated_d.iloc[train_idx]
test = updated_d.iloc[test_idx]
```



# Creating .csv files

```{python}
train.to_csv("data/train_df.csv", index=False)
test.to_csv("data/test_df.csv", index=False)
```